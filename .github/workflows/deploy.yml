name: deploy

on:
  # the 1st condition
  workflow_run:
    workflows: ["ci"]
    branches: ["deploy"]
    types:
      - completed

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version'
        required: true

#2
env:
    # REGISTRY: "your-digitalocean-registry-container-url"
    IMAGE_NAME: ${{ github.event.repository.name }}

jobs:
#   build_and_push:
#     # the 2nd condition
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout the repo 
#         uses: actions/checkout@v2
        
#       - name: Build container image
#         run: docker build -t $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7) .

#       - name: Install doctl
#         uses: digitalocean/action-doctl@v2
#         with:
#           token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
#       - name: Log in to DigitalOcean Container Registry with short-lived credentials
#         run: doctl registry login --expiry-seconds 600
      
#       - name: Remove all old images
#         run: if [ ! -z "$(doctl registry repository list | grep "$(echo $IMAGE_NAME)")" ]; then doctl registry repository delete-manifest $(echo $IMAGE_NAME) $(doctl registry repository list-tags $(echo $IMAGE_NAME) | grep -o "sha.*") --force; else echo "No repository"; fi

#       - name: Push image to DigitalOcean Container Registry
#         run: docker push $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)
        
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    # needs: build_and_push
    
    steps:
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSHKEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          envs: IMAGE_NAME,{{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          script: |
            # Login to registry
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            # Stop running container
            docker stop $(echo $IMAGE_NAME)
            # Remove old container
            docker rm $(echo $IMAGE_NAME)
            # Run a new container from a new image
            docker run -d \
            --restart always \
            --name $(echo $IMAGE_NAME) \
            ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest